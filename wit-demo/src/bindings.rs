// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod test {
  pub mod wit_test {
    
    #[allow(clippy::all)]
    pub mod http {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum Method {
        Get,
        Head,
        Post,
        Put,
        Delete,
        Connect,
        Options,
        Trace,
        Patch,
      }
      impl ::core::fmt::Debug for Method {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Method::Get => {
              f.debug_tuple("Method::Get").finish()
            }
            Method::Head => {
              f.debug_tuple("Method::Head").finish()
            }
            Method::Post => {
              f.debug_tuple("Method::Post").finish()
            }
            Method::Put => {
              f.debug_tuple("Method::Put").finish()
            }
            Method::Delete => {
              f.debug_tuple("Method::Delete").finish()
            }
            Method::Connect => {
              f.debug_tuple("Method::Connect").finish()
            }
            Method::Options => {
              f.debug_tuple("Method::Options").finish()
            }
            Method::Trace => {
              f.debug_tuple("Method::Trace").finish()
            }
            Method::Patch => {
              f.debug_tuple("Method::Patch").finish()
            }
          }
        }
      }
      
      impl Method{
        pub(crate) unsafe fn _lift(val: u8) -> Method{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => Method::Get,
            1 => Method::Head,
            2 => Method::Post,
            3 => Method::Put,
            4 => Method::Delete,
            5 => Method::Connect,
            6 => Method::Options,
            7 => Method::Trace,
            8 => Method::Patch,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      pub type StatusCode = u16;
      #[allow(unused_unsafe, clippy::all)]
      pub fn request(method: Method,url: &str,body: &str,) -> (StatusCode, Option<wit_bindgen::rt::string::String>, ){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 16]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let vec0 = url;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          let vec1 = body;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let ptr2 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "test:wit-test/http@0.0.1")]
          extern "C" {
            #[link_name = "request"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(method.clone() as i32, ptr0, len0, ptr1, len1, ptr2);
          let l3 = i32::from(*((ptr2 + 0) as *const u16));
          let l4 = i32::from(*((ptr2 + 4) as *const u8));
          (l3 as u16, match l4 {
            0 => None,
            1 => {
              let e = {
                let l5 = *((ptr2 + 8) as *const i32);
                let l6 = *((ptr2 + 12) as *const i32);
                let len7 = l6 as usize;
                let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                
                wit_bindgen::rt::string_lift(bytes7)
              };
              Some(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          })
        }
      }
      
    }
    
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:client"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1007] = [3, 0, 6, 99, 108, 105, 101, 110, 116, 0, 97, 115, 109, 13, 0, 1, 0, 7, 53, 1, 65, 2, 1, 66, 2, 1, 64, 1, 3, 109, 115, 103, 115, 1, 0, 4, 0, 5, 112, 114, 105, 110, 116, 1, 0, 4, 1, 22, 116, 101, 115, 116, 58, 119, 105, 116, 45, 116, 101, 115, 116, 47, 105, 111, 64, 48, 46, 48, 46, 49, 5, 0, 11, 8, 1, 0, 2, 105, 111, 3, 0, 0, 7, 183, 1, 1, 65, 2, 1, 66, 7, 1, 109, 9, 3, 103, 101, 116, 4, 104, 101, 97, 100, 4, 112, 111, 115, 116, 3, 112, 117, 116, 6, 100, 101, 108, 101, 116, 101, 7, 99, 111, 110, 110, 101, 99, 116, 7, 111, 112, 116, 105, 111, 110, 115, 5, 116, 114, 97, 99, 101, 5, 112, 97, 116, 99, 104, 4, 0, 6, 109, 101, 116, 104, 111, 100, 3, 0, 0, 1, 123, 4, 0, 11, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 3, 0, 2, 1, 107, 115, 1, 64, 3, 6, 109, 101, 116, 104, 111, 100, 1, 3, 117, 114, 108, 115, 4, 98, 111, 100, 121, 115, 1, 2, 11, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 3, 7, 109, 101, 115, 115, 97, 103, 101, 4, 4, 0, 7, 114, 101, 113, 117, 101, 115, 116, 1, 5, 4, 1, 24, 116, 101, 115, 116, 58, 119, 105, 116, 45, 116, 101, 115, 116, 47, 104, 116, 116, 112, 64, 48, 46, 48, 46, 49, 5, 0, 11, 10, 1, 0, 4, 104, 116, 116, 112, 3, 2, 0, 7, 93, 1, 65, 2, 1, 65, 2, 1, 66, 2, 1, 64, 1, 3, 109, 115, 103, 115, 1, 0, 4, 0, 5, 112, 114, 105, 110, 116, 1, 0, 4, 1, 22, 116, 101, 115, 116, 58, 119, 105, 116, 45, 116, 101, 115, 116, 47, 105, 111, 64, 48, 46, 48, 46, 49, 5, 0, 4, 1, 32, 116, 101, 115, 116, 58, 119, 105, 116, 45, 116, 101, 115, 116, 47, 105, 110, 112, 117, 116, 45, 111, 117, 116, 112, 117, 116, 64, 48, 46, 48, 46, 49, 4, 0, 11, 18, 1, 0, 12, 105, 110, 112, 117, 116, 45, 111, 117, 116, 112, 117, 116, 3, 4, 0, 7, 141, 2, 1, 65, 2, 1, 65, 4, 1, 66, 2, 1, 64, 1, 3, 109, 115, 103, 115, 1, 0, 4, 0, 5, 112, 114, 105, 110, 116, 1, 0, 3, 1, 22, 116, 101, 115, 116, 58, 119, 105, 116, 45, 116, 101, 115, 116, 47, 105, 111, 64, 48, 46, 48, 46, 49, 5, 0, 1, 66, 7, 1, 109, 9, 3, 103, 101, 116, 4, 104, 101, 97, 100, 4, 112, 111, 115, 116, 3, 112, 117, 116, 6, 100, 101, 108, 101, 116, 101, 7, 99, 111, 110, 110, 101, 99, 116, 7, 111, 112, 116, 105, 111, 110, 115, 5, 116, 114, 97, 99, 101, 5, 112, 97, 116, 99, 104, 4, 0, 6, 109, 101, 116, 104, 111, 100, 3, 0, 0, 1, 123, 4, 0, 11, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 3, 0, 2, 1, 107, 115, 1, 64, 3, 6, 109, 101, 116, 104, 111, 100, 1, 3, 117, 114, 108, 115, 4, 98, 111, 100, 121, 115, 1, 2, 11, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 3, 7, 109, 101, 115, 115, 97, 103, 101, 4, 4, 0, 7, 114, 101, 113, 117, 101, 115, 116, 1, 5, 4, 1, 24, 116, 101, 115, 116, 58, 119, 105, 116, 45, 116, 101, 115, 116, 47, 104, 116, 116, 112, 64, 48, 46, 48, 46, 49, 5, 1, 4, 1, 28, 116, 101, 115, 116, 58, 119, 105, 116, 45, 116, 101, 115, 116, 47, 104, 116, 116, 112, 45, 119, 101, 98, 64, 48, 46, 48, 46, 49, 4, 0, 11, 14, 1, 0, 8, 104, 116, 116, 112, 45, 119, 101, 98, 3, 6, 0, 7, 217, 1, 1, 65, 2, 1, 65, 2, 1, 66, 7, 1, 109, 9, 3, 103, 101, 116, 4, 104, 101, 97, 100, 4, 112, 111, 115, 116, 3, 112, 117, 116, 6, 100, 101, 108, 101, 116, 101, 7, 99, 111, 110, 110, 101, 99, 116, 7, 111, 112, 116, 105, 111, 110, 115, 5, 116, 114, 97, 99, 101, 5, 112, 97, 116, 99, 104, 4, 0, 6, 109, 101, 116, 104, 111, 100, 3, 0, 0, 1, 123, 4, 0, 11, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 3, 0, 2, 1, 107, 115, 1, 64, 3, 6, 109, 101, 116, 104, 111, 100, 1, 3, 117, 114, 108, 115, 4, 98, 111, 100, 121, 115, 1, 2, 11, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 3, 7, 109, 101, 115, 115, 97, 103, 101, 4, 4, 0, 7, 114, 101, 113, 117, 101, 115, 116, 1, 5, 3, 1, 24, 116, 101, 115, 116, 58, 119, 105, 116, 45, 116, 101, 115, 116, 47, 104, 116, 116, 112, 64, 48, 46, 48, 46, 49, 5, 0, 4, 1, 26, 116, 101, 115, 116, 58, 119, 105, 116, 45, 116, 101, 115, 116, 47, 99, 108, 105, 101, 110, 116, 64, 48, 46, 48, 46, 49, 4, 0, 11, 12, 1, 0, 6, 99, 108, 105, 101, 110, 116, 3, 8, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
